{"version":3,"sources":["webpack://SvgAnimation/webpack/universalModuleDefinition","webpack://SvgAnimation/webpack/bootstrap","webpack://SvgAnimation/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://SvgAnimation/./node_modules/svg.js/dist/svg.js","webpack://SvgAnimation/./src/bottle-machine/BottleMachine.js","webpack://SvgAnimation/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","undefined","document","SVG","this","element","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","slice","arguments","pop","length","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","size","style","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","radians","Math","PI","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","x","y","cx","cy","width","height","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","fullHex","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","lastValue","lastDestination","settle","seen","indexOf","isArray","split","string","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","move","box","bbox","isNaN","getBBox","pathHandlers","M","p0","L","H","V","C","S","Q","T","Z","A","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","index","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","dom","attr","center","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","svg","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","stringify","is","obj","easing","-","<>","cos",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","real","v","G","transform","num","Text","plot","leading","viewbox","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","forEach","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","rotation","parseMatrix","translate","scale","around","rotate","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","rect","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listeners","handlerMap","listenerId","listener","binding","options","ev","_svgjsListenerId","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","group","getElementById","version","spof","nextSibling","siblings","position","next","previous","forward","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","FactorySvg","props","_classCallCheck","_possibleConstructorReturn","_Component","componentDidMount","_this2","bottles","mobile","bouchon","blinkState","repeat","componentWillUnmount","render","external_root_React_commonjs2_react_commonjs_react_amd_react_default","viewBox","fillRule","strokeWidth","Component","__webpack_exports__","src_BottleMachine","BottleMachine","_BottleMachine"],"mappings":"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","file":"svg-animations.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SvgAnimation\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"SvgAnimation\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.6.6\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Thu Aug 30 2018 11:37:58 GMT+0200 (GMT+02:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n;[  'click'\r\n  , 'dblclick'\r\n  , 'mousedown'\r\n  , 'mouseup'\r\n  , 'mouseover'\r\n  , 'mouseout'\r\n  , 'mousemove'\r\n  // , 'mouseenter' -> not supported by IE\r\n  // , 'mouseleave' -> not supported by IE\r\n  , 'touchstart'\r\n  , 'touchmove'\r\n  , 'touchleave'\r\n  , 'touchend'\r\n  , 'touchcancel' ].forEach(function(event) {\r\n\r\n  // add event to SVG.Element\r\n  SVG.Element.prototype[event] = function(f) {\r\n    // bind event to element rather than element node\r\n    SVG.on(this.node, event, f)\r\n    return this\r\n  }\r\n})\r\n\r\n// Initialize listeners stack\r\nSVG.listeners = []\r\nSVG.handlerMap = []\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function(node, event, listener, binding, options) {\r\n  // create listener, get object-index\r\n  var l     = listener.bind(binding || node.instance || node)\r\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\r\n    , ev    = event.split('.')[0]\r\n    , ns    = event.split('.')[1] || '*'\r\n\r\n\r\n  // ensure valid object\r\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\r\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\r\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\r\n\r\n  if(!listener._svgjsListenerId)\r\n    listener._svgjsListenerId = ++SVG.listenerId\r\n\r\n  // reference listener\r\n  SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l\r\n\r\n  // add listener\r\n  node.addEventListener(ev, l, options || false)\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function(node, event, listener) {\r\n  var index = SVG.handlerMap.indexOf(node)\r\n    , ev    = event && event.split('.')[0]\r\n    , ns    = event && event.split('.')[1]\r\n    , namespace = ''\r\n\r\n  if(index == -1) return\r\n\r\n  if (listener) {\r\n    if(typeof listener == 'function') listener = listener._svgjsListenerId\r\n    if(!listener) return\r\n\r\n    // remove listener reference\r\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\r\n      // remove listener\r\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\r\n\r\n      delete SVG.listeners[index][ev][ns || '*'][listener]\r\n    }\r\n\r\n  } else if (ns && ev) {\r\n    // remove all listeners for a namespaced event\r\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\r\n      for (listener in SVG.listeners[index][ev][ns])\r\n        SVG.off(node, [ev, ns].join('.'), listener)\r\n\r\n      delete SVG.listeners[index][ev][ns]\r\n    }\r\n\r\n  } else if (ns){\r\n    // remove all listeners for a specific namespace\r\n    for(event in SVG.listeners[index]){\r\n        for(namespace in SVG.listeners[index][event]){\r\n            if(ns === namespace){\r\n                SVG.off(node, [event, ns].join('.'))\r\n            }\r\n        }\r\n    }\r\n\r\n  } else if (ev) {\r\n    // remove all listeners for the event\r\n    if (SVG.listeners[index][ev]) {\r\n      for (namespace in SVG.listeners[index][ev])\r\n        SVG.off(node, [ev, namespace].join('.'))\r\n\r\n      delete SVG.listeners[index][ev]\r\n    }\r\n\r\n  } else {\r\n    // remove all listeners on a given node\r\n    for (event in SVG.listeners[index])\r\n      SVG.off(node, event)\r\n\r\n    delete SVG.listeners[index]\r\n    delete SVG.handlerMap[index]\r\n\r\n  }\r\n}\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function(event, listener, binding, options) {\r\n    SVG.on(this.node, event, listener, binding, options)\r\n\r\n    return this\r\n  }\r\n  // Unbind event from listener\r\n, off: function(event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n\r\n    return this\r\n  }\r\n  // Fire given event\r\n, fire: function(event, data) {\r\n\r\n    // Dispatch event\r\n    if(event instanceof window.Event){\r\n        this.node.dispatchEvent(event)\r\n    }else{\r\n        this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail:data, cancelable: true}))\r\n    }\r\n\r\n    this._event = event\r\n    return this\r\n  }\r\n, event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    // Set initial state\r\n    Array.isArray(members) ? this.members = members : this.clear()\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","import React, { Component } from \"react\";\nimport SVG from \"svg.js\";\n\nclass FactorySvg extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let bottles = SVG.get(\"bottles\");\n    let mobile = SVG.get(\"mobile\");\n    let bouchon = SVG.get(\"bouchonMob\");\n    bottles\n      .animate(2000)\n      .dmove(-800, 0)\n      .loop();\n    mobile\n      .animate(1000)\n      .delay(1000)\n      .dmove(0, 300)\n      .loop(null, true);\n\n    const blink1 = () => {\n      bouchon.dmove(0, -100);\n      bouchon.attr({ opacity: 0 });\n    };\n    const blink2 = () => {\n      bouchon.attr({ opacity: 1 });\n      bouchon.animate(100).dmove(0, 100);\n    };\n    let blinkState = true;\n\n    const repeat = () =>\n      (this.repeat = window.setTimeout(() => {\n        blinkState ? blink2() : blink1();\n        blinkState = !blinkState;\n        repeat();\n      }, 1000));\n\n    repeat();\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.repeat);\n  }\n\n  render() {\n    return (\n      <svg\n        id=\"svg-container\"\n        width=\"200px\"\n        version=\"1.1\"\n        viewBox=\"0 0 7086.6141 4960.6298\"\n      >\n        <defs id=\"defs4825\">\n          <mask id=\"mask5845\">\n            <path\n              id=\"path5847\"\n              d=\"m200.1 952.2-5.657-1574 385.4-182.4 5.303-2683 4215-8.839v2754h200v1695z\"\n              fillRule=\"evenodd\"\n              stroke=\"#000\"\n              strokeWidth=\"10.29\"\n              fill=\"#fff\"\n            />\n          </mask>\n        </defs>\n        <g id=\"layer1\" transform=\"translate(0 3908)\">\n          <g id=\"g4957\" mask=\"url(#mask5845)\">\n            <g id=\"static\" transform=\"matrix(1 0 0 1.094 0 76.8)\">\n              <path\n                id=\"path5484\"\n                fill=\"#b3b3b3\"\n                d=\"m2513-3121h-531.7c-153.1 0-277.1 124.1-277.1 277.1v2025h808.8v-2302\"\n              />\n              <rect\n                id=\"rect5486\"\n                transform=\"matrix(2.679 0 0 2.679 -3713 -1397)\"\n                height=\"856.7\"\n                width=\"112.1\"\n                y=\"-640.9\"\n                x=\"2212\"\n                fill=\"#ccc\"\n              />\n            </g>\n            <g id=\"g6585\" transform=\"matrix(9.42 0 0 9.42 5057 -3562)\">\n              <g id=\"chariot\">\n                <path\n                  id=\"path6439\"\n                  d=\"m-179.1 490.1h-16.81v-156.6c0-4.706 3.764-8.521 8.407-8.521s8.407 3.815 8.407 8.521v156.6\"\n                  fill=\"#b3b3b3\"\n                />\n                <path\n                  id=\"path6441\"\n                  d=\"m-440.9 490.1h-16.81v-156.6c0-4.706 3.764-8.521 8.407-8.521s8.407 3.815 8.407 8.521v156.6\"\n                  fill=\"#b3b3b3\"\n                />\n                <path\n                  id=\"path6447\"\n                  d=\"m-156.8 329.6c0 11.17-4.462 21.28-11.69 28.61-7.225 7.323-17.2 11.84-28.23 11.84h-262c-10.89 0-20.75-4.408-27.96-11.59-2.753-2.738-5.117-5.881-7.01-9.335-2.446-4.501-4.073-9.521-4.677-14.86-0.174-1.535-0.2661-3.091-0.2661-4.667 0-1.577 0.0921-3.132 0.2661-4.667 0.6038-5.342 2.231-10.36 4.677-14.86 1.832-3.34 4.104-6.4 6.744-9.075 0.0921-0.0933 0.174-0.1763 0.2661-0.2593 7.205-7.177 17.07-11.59 27.96-11.59h262c22.04 0 39.91 18.11 39.91 40.45\"\n                  fill=\"#d3674a\"\n                />\n                <path\n                  id=\"path6457\"\n                  d=\"m-65.91 370.1h-262c-22.04 0-39.91-18.11-39.91-40.45s17.87-40.45 39.91-40.45h262c22.04 0 39.91 18.11 39.91 40.45s-17.87 40.45-39.91 40.45\"\n                  fill=\"#ef7954\"\n                />\n                <path\n                  id=\"circle6459\"\n                  fill=\"#bf5843\"\n                  d=\"m-303.6 329.6c0.00001 6.189-2.426 12.12-6.744 16.5-4.318 4.376-10.17 6.835-16.28 6.835-6.107 0-11.96-2.459-16.28-6.835-4.318-4.376-6.744-10.31-6.744-16.5 0-12.89 10.31-23.34 23.03-23.34s23.03 10.45 23.03 23.34\"\n                />\n                <path\n                  id=\"circle6461\"\n                  fill=\"#bf5843\"\n                  d=\"m-213.8 329.6c0 6.189-2.426 12.12-6.744 16.5-4.318 4.376-10.17 6.835-16.28 6.835-6.107 0-11.96-2.459-16.28-6.835-4.318-4.376-6.744-10.31-6.744-16.5 0-6.189 2.426-12.12 6.744-16.5 4.318-4.376 10.17-6.835 16.28-6.835 12.72 0 23.03 10.45 23.03 23.34\"\n                />\n                <path\n                  id=\"circle6463\"\n                  fill=\"#bf5843\"\n                  d=\"m-127.8 329.6c0 6.189-2.426 12.12-6.744 16.5-4.318 4.376-10.17 6.835-16.28 6.835-6.107 0-11.96-2.459-16.28-6.835-4.318-4.376-6.744-10.31-6.744-16.5 0-12.89 10.31-23.34 23.03-23.34s23.03 10.45 23.03 23.34\"\n                />\n                <path\n                  id=\"path6465\"\n                  d=\"m-41.83 329.6c0 12.89-10.32 23.34-23.03 23.34-4.81 0-9.272-1.494-12.97-4.045-6.079-4.201-10.06-11.27-10.06-19.29 0-8.018 3.981-15.09 10.06-19.29 3.695-2.552 8.157-4.045 12.97-4.045 12.71 0 23.03 10.44 23.03 23.34\"\n                  fill=\"#bf5843\"\n                />\n                <path\n                  id=\"path6467\"\n                  d=\"m-67.77 329.6c0 8.018-3.981 15.09-10.06 19.29-6.079-4.201-10.06-11.27-10.06-19.29 0-8.018 3.981-15.09 10.06-19.29 6.079 4.201 10.06 11.27 10.06 19.29\"\n                  fill=\"#d3674a\"\n                />\n                <path\n                  id=\"path6469\"\n                  d=\"m-153.7 329.6c0 8.018-3.981 15.09-10.06 19.29-6.079-4.201-10.06-11.27-10.06-19.29 0-8.018 3.981-15.09 10.06-19.29 6.079 4.201 10.06 11.27 10.06 19.29\"\n                  fill=\"#d3674a\"\n                />\n                <path\n                  id=\"path6471\"\n                  d=\"m-239.7 329.6c0 8.018-3.981 15.09-10.06 19.29-6.079-4.201-10.06-11.27-10.06-19.29 0-8.018 3.981-15.09 10.06-19.29 6.079 4.201 10.06 11.27 10.06 19.29\"\n                  fill=\"#d3674a\"\n                />\n                <path\n                  id=\"path6473\"\n                  d=\"m-329.5 329.6c0 3.184-0.6243 6.223-1.77 8.992-1.73 4.201-4.626 7.769-8.29 10.3-3.664-2.531-6.56-6.099-8.29-10.3-1.146-2.769-1.77-5.808-1.77-8.992 0-1.597 0.1535-3.153 0.4605-4.667 1.208-6.057 4.728-11.26 9.6-14.62 4.871 3.361 8.392 8.567 9.6 14.62 0.307 1.513 0.4605 3.069 0.4605 4.667\"\n                  fill=\"#d3674a\"\n                />\n                <path\n                  id=\"path6537\"\n                  d=\"m-318.7 490.1h-16.81v-156.6c0-4.706 3.764-8.521 8.407-8.521s8.407 3.815 8.407 8.521v156.6\"\n                  fill=\"#b3b3b3\"\n                />\n                <path\n                  id=\"path6539\"\n                  d=\"m-327.1 324.9v13.66h-20.8c-1.146-2.769-1.77-5.808-1.77-8.992 0-1.597 0.1535-3.153 0.4605-4.667h22.11\"\n                  fill=\"#b3b3b3\"\n                />\n                <path\n                  id=\"path6541\"\n                  d=\"m-56.92 490.1h-16.81v-156.6c0-4.706 3.764-8.521 8.407-8.521s8.407 3.815 8.407 8.521v156.6\"\n                  fill=\"#b3b3b3\"\n                />\n                <path\n                  id=\"path6543\"\n                  d=\"m-65.32 324.9v13.66h-20.8c-1.146-2.769-1.77-5.808-1.77-8.992 0-1.597 0.1535-3.153 0.4605-4.667h22.11\"\n                  fill=\"#b3b3b3\"\n                />\n                <rect\n                  id=\"rect6545\"\n                  transform=\"matrix(1.023 0 0 1.037 -498.6 18.17)\"\n                  height=\"15\"\n                  width=\"103\"\n                  y=\"410.6\"\n                  x=\"56.34\"\n                  fill=\"#b3b3b3\"\n                />\n                <rect\n                  id=\"rect6547\"\n                  transform=\"matrix(1.023 0 0 1.037 -498.6 18.17)\"\n                  height=\"15\"\n                  width=\"103\"\n                  y=\"410.6\"\n                  x=\"312.1\"\n                  fill=\"#b3b3b3\"\n                />\n              </g>\n            </g>\n            <g id=\"mobile\" transform=\"translate(0,-220)\">\n              <g id=\"bouchonMob\" transform=\"translate(-.00006884 -100 )\">\n                <rect\n                  id=\"rect5524-7-1\"\n                  transform=\"matrix(2.679 0 0 2.679 -2277 -1521)\"\n                  height=\"45.01\"\n                  width=\"78.78\"\n                  y=\"-258\"\n                  x=\"1845\"\n                  fill=\"#ef7954\"\n                />\n                <rect\n                  id=\"rect5526-5-9\"\n                  transform=\"matrix(2.679 0 0 2.679 -2277 -1521)\"\n                  height=\"45.01\"\n                  width=\"31.51\"\n                  y=\"-258\"\n                  x=\"1845\"\n                  fill=\"#d3674a\"\n                />\n              </g>\n              <rect\n                id=\"rect5558\"\n                height=\"195.9\"\n                width=\"325.6\"\n                y=\"-2419\"\n                x=\"2615\"\n                fill=\"#ccc\"\n              />\n              <path\n                id=\"path5564\"\n                fill=\"#ccc\"\n                d=\"m2822-3125h-294.7v706.1h501v-499.8c0-114-92.38-206.3-206.3-206.3\"\n              />\n              <rect\n                id=\"rect5566\"\n                height=\"706.1\"\n                width=\"399.8\"\n                y=\"-3125\"\n                x=\"2341\"\n                fill=\"#b3b3b3\"\n              />\n              <rect\n                id=\"rect5568\"\n                height=\"196\"\n                width=\"66.85\"\n                y=\"-2419\"\n                x=\"2615\"\n                fill=\"#b3b3b3\"\n              />\n              <rect\n                id=\"rect5572\"\n                height=\"257.8\"\n                width=\"45.23\"\n                y=\"-2901\"\n                x=\"2298\"\n                fill=\"#999\"\n              />\n              <polygon\n                id=\"polygon5574\"\n                points=\"2615 -2233 2615 -2289 2941 -2357 2941 -2301\"\n                fill=\"#b3b3b3\"\n              />\n              <polygon\n                id=\"polygon5576\"\n                points=\"2615 -2368 2860 -2419 2941 -2419 2941 -2380 2615 -2312\"\n                fill=\"#b3b3b3\"\n              />\n            </g>\n            <g id=\"bottles\">\n              <g id=\"g4336\">\n                <g id=\"bouchon\">\n                  <rect\n                    id=\"rect5524\"\n                    transform=\"matrix(2.679 0 0 2.679 -3877 -1381)\"\n                    height=\"45.01\"\n                    width=\"78.78\"\n                    y=\"-258\"\n                    x=\"1845\"\n                    fill=\"#ef7954\"\n                  />\n                  <rect\n                    id=\"rect5526\"\n                    transform=\"matrix(2.679 0 0 2.679 -3877 -1381)\"\n                    height=\"45.01\"\n                    width=\"31.51\"\n                    y=\"-258\"\n                    x=\"1845\"\n                    fill=\"#d3674a\"\n                  />\n                </g>\n                <g id=\"bottle\">\n                  <path\n                    id=\"path5518\"\n                    fill=\"#62af68\"\n                    d=\"m1428-1489v668.5h-512.6v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 31.93-36.54 54.82-46.58 45.86-20.08 75.44-65.4 75.44-115.5v-225.1h211v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                  />\n                  <path\n                    id=\"path5520\"\n                    fill=\"#77c67f\"\n                    d=\"m1428-1489v668.5h-428.2v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 32.02-36.54 54.91-46.58 45.77-20.08 75.35-65.4 75.35-115.5v-225.1h126.6v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                  />\n                  <path\n                    id=\"path5522\"\n                    opacity=\"0.49\"\n                    fill=\"#f2f2f2\"\n                    d=\"m1335-1489v668.5h-117.6v-668.5c0-106.4-33.17-180.9-33.17-231v-225.1h39.19v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 91.03 112 91.03 162\"\n                  />\n                </g>\n              </g>\n              <g id=\"g4336-3\">\n                <g id=\"bouchon-6\">\n                  <rect\n                    id=\"rect5524-7\"\n                    transform=\"matrix(2.679 0 0 2.679 -3077 -1381)\"\n                    height=\"45.01\"\n                    width=\"78.78\"\n                    y=\"-258\"\n                    x=\"1845\"\n                    fill=\"#ef7954\"\n                  />\n                  <rect\n                    id=\"rect5526-5\"\n                    transform=\"matrix(2.679 0 0 2.679 -3077 -1381)\"\n                    height=\"45.01\"\n                    width=\"31.51\"\n                    y=\"-258\"\n                    x=\"1845\"\n                    fill=\"#d3674a\"\n                  />\n                </g>\n                <g id=\"bottle-3\">\n                  <path\n                    id=\"path5518-5\"\n                    fill=\"#62af68\"\n                    d=\"m2228-1489v668.5h-512.6v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 31.93-36.54 54.82-46.58 45.86-20.08 75.44-65.4 75.44-115.5v-225.1h211v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                  />\n                  <path\n                    id=\"path5520-6\"\n                    fill=\"#77c67f\"\n                    d=\"m2228-1489v668.5h-428.2v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 32.02-36.54 54.91-46.58 45.77-20.08 75.35-65.4 75.35-115.5v-225.1h126.6v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                  />\n                  <path\n                    id=\"path5522-2\"\n                    opacity=\"0.49\"\n                    fill=\"#f2f2f2\"\n                    d=\"m2135-1489v668.5h-117.6v-668.5c0-106.4-33.17-180.9-33.17-231v-225.1h39.19v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 91.03 112 91.03 162\"\n                  />\n                </g>\n              </g>\n              <g id=\"bottle-3-4-0\">\n                <path\n                  id=\"path5518-5-7-3\"\n                  fill=\"#62af68\"\n                  d=\"m3828-1489v668.5h-512.6v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 31.93-36.54 54.82-46.58 45.86-20.08 75.44-65.4 75.44-115.5v-225.1h211v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5520-6-8-6\"\n                  fill=\"#77c67f\"\n                  d=\"m3828-1489v668.5h-428.2v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 32.02-36.54 54.91-46.58 45.77-20.08 75.35-65.4 75.35-115.5v-225.1h126.6v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5522-2-4-1\"\n                  opacity=\"0.49\"\n                  fill=\"#f2f2f2\"\n                  d=\"m3735-1489v668.5h-117.6v-668.5c0-106.4-33.17-180.9-33.17-231v-225.1h39.19v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 91.03 112 91.03 162\"\n                />\n              </g>\n              <g id=\"bottle-3-4-0-0\">\n                <path\n                  id=\"path5518-5-7-3-6\"\n                  fill=\"#62af68\"\n                  d=\"m4628-1489v668.5h-512.6v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 31.93-36.54 54.82-46.58 45.86-20.08 75.44-65.4 75.44-115.5v-225.1h211v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5520-6-8-6-3\"\n                  fill=\"#77c67f\"\n                  d=\"m4628-1489v668.5h-428.2v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 32.02-36.54 54.91-46.58 45.77-20.08 75.35-65.4 75.35-115.5v-225.1h126.6v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5522-2-4-1-2\"\n                  opacity=\"0.49\"\n                  fill=\"#f2f2f2\"\n                  d=\"m4535-1489v668.5h-117.6v-668.5c0-106.4-33.17-180.9-33.17-231v-225.1h39.19v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 91.03 112 91.03 162\"\n                />\n              </g>\n              <g id=\"bottle-3-4-0-0-9\">\n                <path\n                  id=\"path5518-5-7-3-6-3\"\n                  fill=\"#62af68\"\n                  d=\"m5428-1489v668.5h-512.6v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 31.93-36.54 54.82-46.58 45.86-20.08 75.44-65.4 75.44-115.5v-225.1h211v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5520-6-8-6-3-7\"\n                  fill=\"#77c67f\"\n                  d=\"m5428-1489v668.5h-428.2v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 32.02-36.54 54.91-46.58 45.77-20.08 75.35-65.4 75.35-115.5v-225.1h126.6v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5522-2-4-1-2-4\"\n                  opacity=\"0.49\"\n                  fill=\"#f2f2f2\"\n                  d=\"m5335-1489v668.5h-117.6v-668.5c0-106.4-33.17-180.9-33.17-231v-225.1h39.19v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 91.03 112 91.03 162\"\n                />\n              </g>\n              <g id=\"g4336-3-2\">\n                <g id=\"bouchon-6-5\">\n                  <rect\n                    id=\"rect5524-7-4\"\n                    transform=\"matrix(2.679 0 0 2.679 -2277 -1381)\"\n                    height=\"45.01\"\n                    width=\"78.78\"\n                    y=\"-258\"\n                    x=\"1845\"\n                    fill=\"#ef7954\"\n                  />\n                  <rect\n                    id=\"rect5526-5-7\"\n                    transform=\"matrix(2.679 0 0 2.679 -2277 -1381)\"\n                    height=\"45.01\"\n                    width=\"31.51\"\n                    y=\"-258\"\n                    x=\"1845\"\n                    fill=\"#d3674a\"\n                  />\n                </g>\n                <g id=\"bottle-3-4\">\n                  <path\n                    id=\"path5518-5-4\"\n                    fill=\"#62af68\"\n                    d=\"m3028-1489v668.6h-512v-668.6c0-25 7-49 20-69s32-36 55-46c46-20 75-66 75-116v-225h211v225c0 25 8 49 21 69s32 37 55 47c46 20 75 65 75 115\"\n                  />\n                  <path\n                    id=\"path5520-6-3\"\n                    fill=\"#77c67f\"\n                    d=\"m3028-1489v668.6h-428v-668.6c0-25 7-49 21-69 13-20 32-36 54-46 46-20 76-66 76-116v-225h126v225c0 25 8 49 21 69s32 37 55 47c46 20 75 65 75 115\"\n                  />\n                  <path\n                    id=\"path5522-2-0\"\n                    opacity=\"0.49\"\n                    fill=\"#f2f2f2\"\n                    d=\"m2935-1489v668.6h-118v-668.6c0-106-33-181-33-231v-225h39v225c0 25 8 49 21 69s91 112 91 162\"\n                  />\n                </g>\n              </g>\n              <g id=\"bottle-3-4-0-0-7\" transform=\"translate(800)\">\n                <path\n                  id=\"path5518-5-7-3-6-8\"\n                  fill=\"#62af68\"\n                  d=\"m4628-1489v668.5h-512.6v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 31.93-36.54 54.82-46.58 45.86-20.08 75.44-65.4 75.44-115.5v-225.1h211v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5520-6-8-6-3-6\"\n                  fill=\"#77c67f\"\n                  d=\"m4628-1489v668.5h-428.2v-668.5c0-24.97 7.417-48.85 20.53-68.93 13.12-20.08 32.02-36.54 54.91-46.58 45.77-20.08 75.35-65.4 75.35-115.5v-225.1h126.6v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 31.93 36.45 54.82 46.49 45.86 20.17 75.44 65.49 75.44 115.5\"\n                />\n                <path\n                  id=\"path5522-2-4-1-2-8\"\n                  opacity=\"0.49\"\n                  fill=\"#f2f2f2\"\n                  d=\"m4535-1489v668.5h-117.6v-668.5c0-106.4-33.17-180.9-33.17-231v-225.1h39.19v225.1c0 25.06 7.417 48.94 20.53 69.02 13.12 20.08 91.03 112 91.03 162\"\n                />\n              </g>\n            </g>\n          </g>\n        </g>\n      </svg>\n    );\n  }\n}\nexport default FactorySvg;\n","import _BottleMachine from \"./bottle-machine/BottleMachine\";\n\nexport const BottleMachine = _BottleMachine;\n"],"sourceRoot":""}